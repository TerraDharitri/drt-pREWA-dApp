{"abi":[{"type":"function","name":"allPairs","inputs":[{"name":"_index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"pair","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allPairsLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createPair","inputs":[{"name":"tokenA","type":"address","internalType":"address"},{"name":"tokenB","type":"address","internalType":"address"}],"outputs":[{"name":"pair","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"feeTo","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"feeToSetter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPair","inputs":[{"name":"tokenA","type":"address","internalType":"address"},{"name":"tokenB","type":"address","internalType":"address"}],"outputs":[{"name":"pair","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setFeeTo","inputs":[{"name":"_feeTo","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFeeToSetter","inputs":[{"name":"_feeToSetter","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allPairs(uint256)":"1e3dd18b","allPairsLength()":"574f2ba3","createPair(address,address)":"c9c65396","feeTo()":"017e7e58","feeToSetter()":"094b7415","getPair(address,address)":"e6a43905","setFeeTo(address)":"f46901ed","setFeeToSetter(address)":"a2e74af6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface includes functions to get existing pairs and create new ones.\",\"kind\":\"dev\",\"methods\":{\"allPairs(uint256)\":{\"params\":{\"_index\":\"The index of the pair in the `allPairs` array.\"},\"returns\":{\"pair\":\"The address of the LP pair contract.\"}},\"allPairsLength()\":{\"returns\":{\"_0\":\"The total number of pairs.\"}},\"createPair(address,address)\":{\"params\":{\"tokenA\":\"The address of the first token.\",\"tokenB\":\"The address of the second token.\"},\"returns\":{\"pair\":\"The address of the newly created LP pair contract.\"}},\"feeTo()\":{\"returns\":{\"_0\":\"The address of the fee recipient.\"}},\"feeToSetter()\":{\"returns\":{\"_0\":\"The address of the fee-to setter.\"}},\"getPair(address,address)\":{\"params\":{\"tokenA\":\"The address of the first token.\",\"tokenB\":\"The address of the second token.\"},\"returns\":{\"pair\":\"The address of the LP pair contract, or address(0) if it does not exist.\"}},\"setFeeTo(address)\":{\"params\":{\"_feeTo\":\"The address to receive fees.\"}},\"setFeeToSetter(address)\":{\"params\":{\"_feeToSetter\":\"The new fee-to setter address.\"}}},\"title\":\"IPancakeFactory Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allPairs(uint256)\":{\"notice\":\"Returns the address of the pair at a specific index.\"},\"allPairsLength()\":{\"notice\":\"Returns the total number of pairs created by the factory.\"},\"createPair(address,address)\":{\"notice\":\"Creates a liquidity pair for two tokens.\"},\"feeTo()\":{\"notice\":\"Returns the address that receives protocol fees.\"},\"feeToSetter()\":{\"notice\":\"Returns the address that is allowed to change the fee-to address.\"},\"getPair(address,address)\":{\"notice\":\"Gets the address of the pair for two tokens.\"},\"setFeeTo(address)\":{\"notice\":\"Sets the address that will receive protocol fees.\"},\"setFeeToSetter(address)\":{\"notice\":\"Sets the address that is allowed to change the fee-to address.\"}},\"notice\":\"Defines the external interface for a PancakeSwap V2 Factory contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity/interfaces/IPancakeFactory.sol\":\"IPancakeFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/liquidity/interfaces/IPancakeFactory.sol\":{\"keccak256\":\"0x78f74b85a2e2ce78aedab9d02f88982679e2db29285020c28f79cac02263f550\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c7708858353d94245b42435d16ff977b10752b8007473ae401ee89577429612\",\"dweb:/ipfs/QmR7qMMkGEKi7gZAfrYadTgqSyhR8GuYiuvfriU9sFZMw8\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"stateMutability":"view","type":"function","name":"allPairs","outputs":[{"internalType":"address","name":"pair","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allPairsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"feeTo","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"feeToSetter","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"stateMutability":"view","type":"function","name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}]},{"inputs":[{"internalType":"address","name":"_feeTo","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setFeeTo"},{"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setFeeToSetter"}],"devdoc":{"kind":"dev","methods":{"allPairs(uint256)":{"params":{"_index":"The index of the pair in the `allPairs` array."},"returns":{"pair":"The address of the LP pair contract."}},"allPairsLength()":{"returns":{"_0":"The total number of pairs."}},"createPair(address,address)":{"params":{"tokenA":"The address of the first token.","tokenB":"The address of the second token."},"returns":{"pair":"The address of the newly created LP pair contract."}},"feeTo()":{"returns":{"_0":"The address of the fee recipient."}},"feeToSetter()":{"returns":{"_0":"The address of the fee-to setter."}},"getPair(address,address)":{"params":{"tokenA":"The address of the first token.","tokenB":"The address of the second token."},"returns":{"pair":"The address of the LP pair contract, or address(0) if it does not exist."}},"setFeeTo(address)":{"params":{"_feeTo":"The address to receive fees."}},"setFeeToSetter(address)":{"params":{"_feeToSetter":"The new fee-to setter address."}}},"version":1},"userdoc":{"kind":"user","methods":{"allPairs(uint256)":{"notice":"Returns the address of the pair at a specific index."},"allPairsLength()":{"notice":"Returns the total number of pairs created by the factory."},"createPair(address,address)":{"notice":"Creates a liquidity pair for two tokens."},"feeTo()":{"notice":"Returns the address that receives protocol fees."},"feeToSetter()":{"notice":"Returns the address that is allowed to change the fee-to address."},"getPair(address,address)":{"notice":"Gets the address of the pair for two tokens."},"setFeeTo(address)":{"notice":"Sets the address that will receive protocol fees."},"setFeeToSetter(address)":{"notice":"Sets the address that is allowed to change the fee-to address."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/liquidity/interfaces/IPancakeFactory.sol":"IPancakeFactory"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/liquidity/interfaces/IPancakeFactory.sol":{"keccak256":"0x78f74b85a2e2ce78aedab9d02f88982679e2db29285020c28f79cac02263f550","urls":["bzz-raw://5c7708858353d94245b42435d16ff977b10752b8007473ae401ee89577429612","dweb:/ipfs/QmR7qMMkGEKi7gZAfrYadTgqSyhR8GuYiuvfriU9sFZMw8"],"license":"MIT"}},"version":1},"id":26}